#include <LiquidCrystal.h>

// Breadboard Parameters //

LiquidCrystal lcd(12, 11, 5, 4, 3, 2);

int button1 = A1;
int button2 = A2;
int button3 = A3;
int button4 = A4;
int button5 = A5;
int button6 = 7;
int button7 = 8;

int RGBRedPin = 9;
int RGBBluePin = 10;
int RGBGreenPin = 6;

// --- Functions: Test Board Inputs --- //

/*
void button1press() // validated
{
  if (digitalRead(button1) == HIGH)
  {
    Serial.println(F("We pressed button 1."));
    delay(100);
  }
}

void button2press() // validated
{
  if (digitalRead(button2) == HIGH)
  {
    Serial.println(F("We pressed button 2."));
    delay(100);
  }
}

void button3press() // validated
{
  if (digitalRead(button3) == HIGH)
  {
    Serial.println(F("We pressed button 3."));
    delay(100);
  }
}

void button4press() // validated
{
  if (digitalRead(button4) == HIGH)
  {
    Serial.println(F("We pressed button 4."));
    delay(100);
  }
}

void button5press() // validated
{
  if (digitalRead(button5) == HIGH)
  {
    Serial.println(F("We pressed button 5."));
    delay(100);
  }
}

void button6press() // validated
{
  if (digitalRead(button6) == HIGH)
  {
    Serial.println(F("We pressed button 6."));
    delay(100);
  }
}

void RGBTest()
{ // validated
  digitalWrite(RGBRedPin, HIGH);
  delay(300);
  digitalWrite(RGBRedPin, LOW);
  digitalWrite(RGBGreenPin, HIGH);
  delay(300);
  digitalWrite(RGBGreenPin, LOW);
  digitalWrite(RGBBluePin, HIGH);
  delay(300);
  digitalWrite(RGBBluePin, LOW);
}

// LCD validated via setup() */

// --- Name, Species and Job Arrays --- //

const char *species[] = {"Griffin", "Dragon", "Phoenix"};
const char *namesGriffin[] = {"Talonclaw", "Stormcloud", "Windrider", "Thundercloud", "Moonbeak", "Mistwing", "Stormrider"};
const char *namesDragon[] = {"Silverclaw", "Stoneblade", "Frostmaw", "Tempest", "Cloudrend", "Stormshower", "Skyrender"};
const char *namesPhoenix[] = {"Fireheart", "Emberflare", "Dawnwing", "Ashfeather", "Stormcinder", "Flamewing", "Cindersoar"};
const char *parentJobs[] = {"guarding the city", "hunting", "providing transportation", "teaching", "building infrastructure", "conducting city repairs", "meeting with delegates", "holding council"};
const char *tiredness[] = {"very tired", "somewhat tired", "well rested"};
const char *hunger[] = {"very hungry", "somewhat hungry", "well-fed"};
const char *thirst[] = {"very thirsty", "somewhat thirsty", "well-hydrated"};
const char *happiness[] = {"somewhat unhappy", "happy", "very happy"};
const char *trust[] = {"barely at all", "just a tiny bit", "a little bit", "a fair bit", "quite a lot", "completely"};

// --- Ongoing Values --- //

char currentNickname[20] = "";
char nicknameInput[20] = "";

const char *currentName = "";
const char *currentSpecies = "";
const char *job1 = "";
const char *job2 = "";
const char *currentTiredness = "";
const char *currentHunger = "";
const char *currentThirst = "";
const char *currentHappiness = "";
const char *currentTrust = "";

int currentAge = 0;

int speciesIndex = 0;
int griffinNameIndex = 0;
int dragonNameIndex = 0;
int phoenixNameIndex = 0;

int trustIndex = 0;
int job1Index = 0;
int job2Index = 0;
int tirednessIndex = 0;
int hungerIndex = 0;
int thirstIndex = 0;
int happinessIndex = 0;

bool isGenerated = false;

/* -- ASCII Art ---

Credit: ASCII Art functions generated by Deepseek and then further edited by me */

// - Griffin - //

void displayGriffin()
{
  lcd.clear();
  // Line 1: Eagle head and wings
  lcd.print(" {^v^}>> ");
  delay(10);
  // Line 2: Lion body
  lcd.setCursor(0, 1);
  lcd.print(" /\\_/\\~~~>");
  delay(10);
}

void displaySleepingGriffin()
{
  lcd.clear();
  // Line 1: Sleeping eagle head and wings
  lcd.print(" {-v-}zz ");
  delay(10);
  // Line 2: Curled up lion body
  lcd.setCursor(0, 1);
  lcd.print(" ~\\_/~  ");
  delay(10);
}

void displayEatingGriffin()
{
  lcd.clear();
  // Line 1: Eagle head with food and wings
  lcd.print(" {^o^}>> ");
  delay(10);
  // Line 2: Lion body with food
  lcd.setCursor(0, 1);
  lcd.print(" /\\_/\\<~~>");
  delay(10);
}

void displayPlayingGriffin()
{
  lcd.clear();
  // Line 1: Excited eagle head and wings
  lcd.print(" {^+^}>> ");
  delay(10);
  // Line 2: Pouncing lion body
  lcd.setCursor(0, 1);
  lcd.print(" /\\_/\\===~");
  delay(10);
}

// - Dragon - //

void displayDragon()
{
  lcd.clear();
  // Line 1: Head and wings
  lcd.print(" /^..^\\ ");
  delay(10);
  // Line 2: Body and tail
  lcd.setCursor(0, 1);
  lcd.print(" \\_()_/--->");
  delay(10);
}

void displaySleepingDragon()
{
  lcd.clear();
  // Line 1: Head tucked in, sleeping
  lcd.print("  (^-.-^)zz ");
  delay(10);
  // Line 2: Coiled body
  lcd.setCursor(0, 1);
  lcd.print(" ~\\_()_/~~");
  delay(10);
}

void displayEatingDragon()
{
  lcd.clear();
  // Line 1: Head chewing
  lcd.print(" /^==^\\ ");
  delay(10);
  // Line 2: Body with food in mouth
  lcd.setCursor(0, 1);
  lcd.print(" \\_()_/==>");
  delay(10);
}

void displayPlayingDragon()
{
  lcd.clear();
  // Line 1: Excited head, fire breath
  lcd.print(" /^+^\\~~~ ");
  delay(10);
  // Line 2: Running pose
  lcd.setCursor(0, 1);
  lcd.print(" \\_()_/===>>");
  delay(10);
}

// - Phoenix - //

void displayPhoenix()
{
  lcd.clear();
  // Line 1: Head and flames
  lcd.print(" (^o^)>>");
  delay(10);
  // Line 2: Fire trail
  lcd.setCursor(0, 1);
  lcd.print(" //_\\~~~~>");
  delay(10);
}

void displaySleepingPhoenix()
{
  lcd.clear();
  // Line 1: Head resting, small embers
  lcd.print(" (-.-)~ ");
  delay(10);
  // Line 2: Coiled fire
  lcd.setCursor(0, 1);
  lcd.print(" //_\\~~zZ~>");
  delay(10);
}

void displayEatingPhoenix()
{
  lcd.clear();
  // Line 1: Head nibbling
  lcd.print(" (^=^) ");
  delay(10);
  // Line 2: Fire trail with food sparks
  lcd.setCursor(0, 1);
  lcd.print(" //_\\~~o~>");
  delay(10);
}

void displayPlayingPhoenix()
{
  lcd.clear();
  // Line 1: Excited head, roaring fire
  lcd.print(" (^o^)====");
  delay(10);
  // Line 2: Spiraling fire trail
  lcd.setCursor(0, 1);
  lcd.print("~\\~o~//>>");
  delay(10);
}

// --- End ASCII Art --- //

// --- Functions --- //

// - Display Creatures - //

void displayCreature()
{
  lcd.clear();

  if (strcmp(currentSpecies, "Griffin") == 0)
  {
    displayGriffin();
  }
  else if (strcmp(currentSpecies, "Dragon") == 0)
  {
    displayDragon();
  }
  else if (strcmp(currentSpecies, "Phoenix") == 0)
  {
    displayPhoenix();
  }
}

void displaySleepingCreature()
{
  lcd.clear();

  if (strcmp(currentSpecies, "Griffin") == 0)
  {
    displaySleepingGriffin();
  }
  else if (strcmp(currentSpecies, "Dragon") == 0)
  {
    displaySleepingDragon();
  }
  else if (strcmp(currentSpecies, "Phoenix") == 0)
  {
    displaySleepingPhoenix();
  }
}

void displayEatingCreature()
{
  lcd.clear();

  if (strcmp(currentSpecies, "Griffin") == 0)
  {
    displayEatingGriffin();
  }
  else if (strcmp(currentSpecies, "Dragon") == 0)
  {
    displayEatingDragon();
  }
  else if (strcmp(currentSpecies, "Phoenix") == 0)
  {
    displayEatingPhoenix();
  }
}

void displayPlayingCreature()
{
  lcd.clear();

  if (strcmp(currentSpecies, "Griffin") == 0)
  {
    displayPlayingGriffin();
  }
  else if (strcmp(currentSpecies, "Dragon") == 0)
  {
    displayPlayingDragon();
  }
  else if (strcmp(currentSpecies, "Phoenix") == 0)
  {
    displayPlayingPhoenix();
  }
}

// - Creature Initialization - //

void nicknamePrompt()
{

  bool isValid = false;

  while (!isValid)

  {
    Serial.println(F("\nWould you like to give them a nickname?"));
    Serial.println(F("Enter 'Y' for yes or 'N' for no:"));

    while (!Serial.available())
    {
      delay(10);
    }

    char nicknamePromptResponse = (char)Serial.read();

    if (nicknamePromptResponse == 'Y' || nicknamePromptResponse == 'y')
    {
      Serial.print(F("What would you like to nickname "));
      Serial.print(currentName);
      Serial.println(F("?"));

      int i = 0;
      memset(nicknameInput, 0, sizeof(nicknameInput));

      while (!Serial.available())
      {
        delay(10);
      }

      while (Serial.available() && i < sizeof(nicknameInput) - 1)
      {
        nicknameInput[i++] = (char)Serial.read();
        delay(200);
      }
      nicknameInput[i] = '\0';
      strncpy(currentNickname, nicknameInput, sizeof(currentNickname));
      currentNickname[sizeof(currentNickname) - 1] = '\0';
      isValid = true;
      break;
    }

    else if (nicknamePromptResponse == 'N' || nicknamePromptResponse == 'n')
    {
      Serial.println(F("You're not choosing a nickname."));
      strncpy(currentNickname, currentName, sizeof(currentNickname));
      currentNickname[sizeof(currentNickname) - 1] = '\0';
      isValid = true;
      break;
    }
    else
    {
      Serial.print(F("Invalid entry: "));
      Serial.println(nicknamePromptResponse);
      Serial.println(F("Please enter 'Y' or 'N'."));
    }
  }
}

void generateTraits()
{
  if (digitalRead(button1) == HIGH && (!isGenerated))
  {
    delay(1000);

    isGenerated = true;

    speciesIndex = random(0, 3);
    currentSpecies = species[speciesIndex];

    switch (speciesIndex)
    {
    case 0:
      griffinNameIndex = random(0, 7);
      currentName = namesGriffin[griffinNameIndex];
      delay(50);
      break;

    case 1:
      dragonNameIndex = random(0, 7);
      currentName = namesDragon[dragonNameIndex];
      delay(50);
      break;

    case 2:
      phoenixNameIndex = random(0, 7);
      currentName = namesPhoenix[phoenixNameIndex];
      delay(50);
      break;
    }

    displayCreature();

    currentAge = random(2, 5);

    tirednessIndex = random(0, 3);
    currentTiredness = tiredness[tirednessIndex];

    hungerIndex = random(0, 3);
    currentHunger = hunger[hungerIndex];

    thirstIndex = random(0, 3);
    currentThirst = thirst[thirstIndex];

    trustIndex = random(0, 2);
    // only the first two trust levels
    currentTrust = trust[trustIndex];

    happinessIndex = random(0, 3);
    currentHappiness = happiness[happinessIndex];

    do
    {
      job1Index = random(0, 8);
      job2Index = random(0, 8);
    } while (job1Index == job2Index);

    job1 = parentJobs[job1Index];
    job2 = parentJobs[job2Index];

    Serial.println("\n");
    delay(100);
    Serial.print(F("You're providing care to a "));
    Serial.print(currentSpecies);
    delay(100);
    Serial.print(F(" whose name is "));
    Serial.print(currentName);
    Serial.println(F("."));
    delay(100);
    Serial.print(F("They are "));
    Serial.print(currentAge);
    Serial.print(F(" years old, "));
    delay(100);
    Serial.print(F("and they're currently "));
    Serial.print(currentTiredness);
    Serial.print(F(", "));
    Serial.print(currentThirst);
    Serial.print(F(", and "));
    Serial.print(currentHunger);
    Serial.println(F("."));
    delay(100);
    Serial.print(F("They trust you "));
    Serial.print(currentTrust);
    Serial.println(F("."));
    delay(100);
    Serial.print(F("Their parents are "));
    Serial.print(job1);
    Serial.print(F(" and "));
    Serial.print(job2);
    Serial.println(F("."));
    delay(100);
    nicknamePrompt();
  }
  else if (digitalRead(button1) == HIGH && (isGenerated))
  // the program shouldn't ever access this else if statement, but putting it here as a failsafe in case i've missed something
  {
    delay(50);
    Serial.print(F("You're already caring for "));
    Serial.print(currentNickname);
    delay(500);
  }
}

// - Menu Options - //

void incrementTrust() {
  
  int currentLevel = -1;
  for (int i = 0; i < 6; i++) {
    if (strcmp(currentTrust, trust[i]) == 0) {
      currentLevel = i;
      break;
    }
  }
  
  if (currentLevel >= 0 && currentLevel < 5) {
    currentTrust = trust[currentLevel + 1];
  }
}

void danceParty()
{
  displayPlayingCreature();
  Serial.print("\n");
  Serial.print("You and ");
  Serial.print(currentNickname);
  Serial.print(" have a little dance party.");

  digitalWrite(RGBRedPin, HIGH);
  delay(300);
  digitalWrite(RGBRedPin, LOW);
  digitalWrite(RGBGreenPin, HIGH);
  delay(300);
  digitalWrite(RGBGreenPin, LOW);
  digitalWrite(RGBBluePin, HIGH);
  delay(300);
  digitalWrite(RGBBluePin, LOW);

  digitalWrite(RGBRedPin, HIGH);
  delay(300);
  digitalWrite(RGBRedPin, LOW);
  digitalWrite(RGBGreenPin, HIGH);
  delay(300);
  digitalWrite(RGBGreenPin, LOW);
  digitalWrite(RGBBluePin, HIGH);
  delay(300);
  digitalWrite(RGBBluePin, LOW);

  digitalWrite(RGBRedPin, HIGH);
  delay(300);
  digitalWrite(RGBRedPin, LOW);
  digitalWrite(RGBGreenPin, HIGH);
  delay(300);
  digitalWrite(RGBGreenPin, LOW);
  digitalWrite(RGBBluePin, HIGH);
  delay(300);
  digitalWrite(RGBBluePin, LOW);

  digitalWrite(RGBRedPin, HIGH);
  delay(300);
  digitalWrite(RGBRedPin, LOW);
  digitalWrite(RGBGreenPin, HIGH);
  delay(300);
  digitalWrite(RGBGreenPin, LOW);
  digitalWrite(RGBBluePin, HIGH);
  delay(300);
  digitalWrite(RGBBluePin, LOW);

  incrementTrust();
}

void foodAndWater()
{
  Serial.print("\n");
  Serial.print(F("You give some food and water to "));
  Serial.print(currentNickname);
  Serial.println(F("."));
  delay(1000);
  displayEatingCreature();

  int currentIndexHunger = -1;
  for (int i = 0; i < 3; i++)
  {
    if (strcmp(currentHunger, hunger[i]) == 0)
    {
      currentIndexHunger = i;
      break;
    }
  }

  int currentIndexThirst = -1;
  for (int i = 0; i < 3; i++)
  {
    if (strcmp(currentThirst, thirst[i]) == 0)
    {
      currentIndexThirst = i;
      break;
    }
  }

  if (currentIndexHunger < 2)
  {
    currentHunger = hunger[currentIndexHunger + 1];
    Serial.print(currentNickname);
    Serial.print(F(" is now "));
    Serial.print(currentHunger);
    Serial.println(F("."));
  }
  else
  {
    Serial.print(currentNickname);
    Serial.print(F(" is "));
    Serial.print(currentHunger);
    Serial.println(F("."));
  }

  if (currentIndexThirst < 2)
  {
    currentThirst = thirst[currentIndexThirst + 1];
    Serial.print(currentNickname);
    Serial.print(F(" is now "));
    Serial.print(currentThirst);
    Serial.println(F("."));
  }
  else
  {
    Serial.print(currentNickname);
    Serial.print(F(" is "));
    Serial.print(currentThirst);
    Serial.println(F("."));
  }
  incrementTrust();
  delay(2000);
}

void nap()
{
  Serial.print("\n");
  Serial.print(F("You tuck "));
  Serial.print(currentNickname);
  Serial.println(F(" in for a nap."));
  delay(1000);
  displaySleepingCreature();

  int currentIndexNap = -1;
  for (int i = 0; i < 3; i++)
  {
    if (strcmp(currentTiredness, tiredness[i]) == 0)
    {
      currentIndexNap = i;
      break;
    }
  }

  if (currentIndexNap < 2)
  {
    currentTiredness = tiredness[currentIndexNap + 1];
    Serial.print(currentNickname);
    Serial.print(F(" is now "));
    Serial.print(currentTiredness);
    Serial.println(F("."));
  }
  else
  {
    Serial.print(currentNickname);
    Serial.print(F(" is "));
    Serial.print(currentTiredness);
    Serial.println(F("."));
  }
  incrementTrust();
  delay(2000);
}

void headpats()
{
  displayPlayingCreature();

  if (strcmp(currentTrust, trust[5]) != 0)

  {
    Serial.print(currentNickname);
    Serial.println("doesn't trust you enough yet for headpats.");
  }
  else
  {
    Serial.print("\n");
    Serial.print(F("You pat "));
    Serial.print(currentNickname);
    Serial.println(F(" on the head."));
  }

  delay(1000);

  int currentIndexHappiness = -1;
  for (int i = 0; i < 3; i++)
  {
    if (strcmp(currentHappiness, happiness[i]) == 0)
    {
      currentIndexHappiness = i;
      break;
    }
  }

  if (currentIndexHappiness < 2)
  {
    currentHappiness = happiness[currentIndexHappiness + 1];
    Serial.print(currentNickname);
    Serial.print(F(" is now "));
    Serial.print(currentHappiness);
    Serial.println(F("."));
  }
  else
  {
    Serial.print(currentNickname);
    Serial.print(F(" is "));
    Serial.print(currentHappiness);
    Serial.println(F("."));
  }
  delay(2000);
  incrementTrust();
}

void displayCurrentCondition()
{
  Serial.print(F("\n"));
  Serial.print(currentNickname);
  Serial.print(F(" is currently "));
  Serial.print(currentTiredness);
  Serial.println(F("."));
  delay(400);
  Serial.print(F("They're "));
  Serial.print(currentThirst);
  Serial.print(F(" and they're "));
  Serial.print(currentHunger);
  Serial.println(F("."));
  delay(400);
  Serial.print(F("They're "));
  Serial.print(currentHappiness);
  Serial.print(F(" and they trust you "));
  Serial.print(currentTrust);
  Serial.println(F("."));
  delay(2000);
}

void parentsPickup() {
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Take care,");
  lcd.setCursor(0, 1);
  lcd.print(currentNickname);
  delay(2000);

  Serial.print(F("\n"));
  Serial.print(currentNickname);
  Serial.println(F("'s parents have arrived to pick them up."));
  Serial.print(F("It's time for "));
  Serial.print(currentNickname);
  Serial.println(F(" to go home."));

  delay(2000);

  lcd.clear();

  memset(currentNickname, 0, sizeof(currentNickname));
  memset(nicknameInput, 0, sizeof(nicknameInput));
  
  currentName = "";
  currentSpecies = "";
  job1 = "";
  job2 = "";
  currentTiredness = "";
  currentHunger = "";
  currentThirst = "";
  currentHappiness = "";
  currentTrust = "";
  
  currentAge = 0;
  speciesIndex = 0;
  griffinNameIndex = 0;
  dragonNameIndex = 0;
  phoenixNameIndex = 0;
  trustIndex = 0;
  job1Index = 0;
  job2Index = 0;
  tirednessIndex = 0;
  hungerIndex = 0;
  thirstIndex = 0;
  happinessIndex = 0;
  
  isGenerated = false;
  delay(1000);

  Serial.println(F("Press Button 1 to care for a new creature."));
}

void menuChooseAction()
{
  bool isRefreshedRequired = true;

  while (isGenerated)
  {
    if (isRefreshedRequired)
    {
      delay(500);
      Serial.println();
      Serial.println(F("--- Menu ---"));
      delay(300);
      Serial.print(F("Press Button 2 to have a little dance party with "));
      Serial.print(currentNickname);
      Serial.println(F("."));
      delay(300);
      Serial.print(F("Press Button 3 to give "));
      Serial.print(currentNickname);
      Serial.println(F(" food and water."));
      delay(300);
      Serial.print(F("Press Button 4 to tuck "));
      Serial.print(currentNickname);
      Serial.println(F(" in for a nap."));
      delay(300);
      Serial.print(F("Press Button 5 to give "));
      Serial.print(currentNickname);
      Serial.println(F(" headpats."));
      delay(300);
      Serial.print(F("Press Button 6 to see "));
      Serial.print(currentNickname);
      Serial.println(F("'s current condition."));
      delay(300);
      Serial.print(F("Press Button 7 when it's time for "));
      Serial.print(currentNickname);
      Serial.println(F("'s parents to pick them up."));

      isRefreshedRequired = false;
    }

    for (int i = 0; i < 10; i++)
    {
      if (digitalRead(button1) == HIGH)
      {
        Serial.print("\n");
        Serial.print(F("You're already caring for "));
        Serial.print(currentNickname);
        Serial.println(".");
        isRefreshedRequired = true;
        break;
      }
      if (digitalRead(button2) == HIGH)
      {
        delay(50);
        danceParty();
        isRefreshedRequired = true;
        break;
      }
      if (digitalRead(button3) == HIGH)
      {
        delay(50);
        foodAndWater();
        isRefreshedRequired = true;
        break;
      }
      if (digitalRead(button4) == HIGH)
      {
        delay(50);
        nap();
        isRefreshedRequired = true;
        break;
      }
      if (digitalRead(button5) == HIGH)
      {
        delay(50);
        headpats();
        isRefreshedRequired = true;
        break;
      }
      if (digitalRead(button6) == HIGH)
      {
        delay(50);
        displayCurrentCondition();
        isRefreshedRequired = true;
        break;
      }
      if (digitalRead(button7) == HIGH)
      {
        delay(50);
        parentsPickup();
        isRefreshedRequired = true;
        break;
      }
      delay(100);
    }
  }
}

// - setup and loop - //

void setup()
{
  Serial.begin(9600);
  randomSeed(analogRead(0));
  Serial.print(F("Press Button 1 to begin."));

  lcd.begin(16, 2);
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Creature Care");

  pinMode(button1, INPUT);
  pinMode(button2, INPUT);
  pinMode(button3, INPUT);
  pinMode(button4, INPUT);
  pinMode(button5, INPUT);
  pinMode(button6, INPUT);
  pinMode(button7, INPUT);
  pinMode(RGBBluePin, OUTPUT);
  pinMode(RGBGreenPin, OUTPUT);
  pinMode(RGBRedPin, OUTPUT);
}

void loop()
{
  if (!isGenerated)
  {
    generateTraits();
  }
  else
  {
    menuChooseAction();
  }
  delay(50);
}