#include <LiquidCrystal.h>

// Breadboard Parameters //

LiquidCrystal lcd(12, 11, 5, 4, 3, 2);

/* to-do:

- find a way to incorporate trust mechanics (it's mentioned in the intial traits)
- play game function
- parents pick up function
- different ASCI art for different menus
- find some way to incorporate RGB (maybe use it while we play game) */

int button1 = A1;
int button2 = A2;
int button3 = A3;
int button4 = A4;
int button5 = A5;
int button6 = 7;
int button7 = 8;

int RGBRedPin = 9;
int RGBBluePin = 10;
int RGBGreenPin = 6;

// --- Functions: Test Board Inputs --- //

/*
void button1press() // validated
{
  if (digitalRead(button1) == HIGH)
  {
    Serial.println("We pressed button 1.");
    delay(100);
  }
}

void button2press() // validated
{
  if (digitalRead(button2) == HIGH)
  {
    Serial.println("We pressed button 2.");
    delay(100);
  }
}

void button3press() // validated
{
  if (digitalRead(button3) == HIGH)
  {
    Serial.println("We pressed button 3.");
    delay(100);
  }
}

void button4press() // validated
{
  if (digitalRead(button4) == HIGH)
  {
    Serial.println("We pressed button 4.");
    delay(100);
  }
}

void button5press() // validated
{
  if (digitalRead(button5) == HIGH)
  {
    Serial.println("We pressed button 5.");
    delay(100);
  }
}

void button6press() // validated
{
  if (digitalRead(button6) == HIGH)
  {
    Serial.println("We pressed button 6.");
    delay(100);
  }
}

void RGBTest()
{ // validated
  digitalWrite(RGBRedPin, HIGH);
  delay(300);
  digitalWrite(RGBRedPin, LOW);
  digitalWrite(RGBGreenPin, HIGH);
  delay(300);
  digitalWrite(RGBGreenPin, LOW);
  digitalWrite(RGBBluePin, HIGH);
  delay(300);
  digitalWrite(RGBBluePin, LOW);
}

// LCD validated via setup() */

// --- Name, Species and Job Arrays --- //

const char *species[] = {"Griffin", "Dragon", "Phoenix"};
const char *namesGriffin[] = {"Talonclaw", "Stormcloud", "Windrider", "Thundercloud", "Moonbeak", "Mistwing", "Stormrider"};
const char *namesDragon[] = {"Silverclaw", "Stoneblade", "Frostmaw", "Tempest", "Cloudrend", "Stormshower", "Skyrender"};
const char *namesPhoenix[] = {"Fireheart", "Emberflare", "Dawnwing", "Ashfeather", "Stormcinder", "Flamewing", "Cindersoar"};
const char *parentJobs[] = {"guarding the city", "hunting", "providing transportation", "teaching", "building infrastructure", "conducting city repairs", "meeting with delegates", "holding council"};
const char *tiredness[] = {"very tired", "somewhat tired", "well rested"};
const char *hunger[] = {"very hungry", "somewhat hungry", "well-fed"};
const char *thirst[] = {"very thirsty", "somewhat thirsty", "well-hydrated"};
const char *happiness[] = {"somewhat unhappy", "happy", "very happy"};
const char *trust[] = {"a little bit", "a fair amount", "quite a lot"};

// --- Ongoing Values --- //

char currentNickname[20] = "";
char nicknameInput[20] = "";

const char *currentName = "";
const char *currentSpecies = "";
const char *job1 = "";
const char *job2 = "";
const char *currentTiredness = "";
const char *currentHunger = "";
const char *currentThirst = "";
const char *currentHappiness = "";
const char *currentTrust = "";

int currentAge = 0;

int speciesIndex = 0;
int griffinNameIndex = 0;
int dragonNameIndex = 0;
int phoenixNameIndex = 0;

int job1Index = 0;
int job2Index = 0;
int tirednessIndex = 0;
int hungerIndex = 0;
int thirstIndex = 0;
int happinessIndex = 0;
int trustIndex = 0;

bool isGenerated = false;

/* -- ASCII Art ---

Credit: ASCII Art functions generated by Deepseek and then further edited by me */

void displayGriffin()
{
  lcd.clear();
  // Line 1: Eagle head and wings
  lcd.print(" {^v^}>> ");
  // Line 2: Lion body
  lcd.setCursor(0, 1);
  lcd.print(" /\\_/\\~~~>");
}

void displayDragon()
{
  lcd.clear();
  // Line 1: Head and wings
  lcd.print(" /^..^\\ ");
  // Line 2: Body and tail
  lcd.setCursor(0, 1);
  lcd.print(" \\_()_/--->");
}

void displayPhoenix()
{
  lcd.clear();
  // Line 1: Head and flames
  lcd.print(" (^o^)>>");
  // Line 2: Fire trail
  lcd.setCursor(0, 1);
  lcd.print(" ~~o~~~~>");
}

// --- End ASCII Art --- //

// functions //

void displayCreature()
{
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print(currentSpecies);
  lcd.setCursor(0, 1);
  lcd.print(currentName);
  delay(3000);

  lcd.clear();

  if (strcmp(currentSpecies, "Griffin") == 0)
  {
    displayGriffin();
  }
  else if (strcmp(currentSpecies, "Dragon") == 0)
  {
    displayDragon();
  }
  else if (strcmp(currentSpecies, "Phoenix") == 0)
  {
    displayPhoenix();
  }
}

void nicknamePrompt()
{
  Serial.println("\nWould you like to give them a nickname?");
  Serial.println("Enter 'Y' for yes or 'N' for no:");

  while (!Serial.available())
  {
    delay(10);
  }

  char nicknamePromptResponse = (char)Serial.read();

  if (nicknamePromptResponse == 'Y' || nicknamePromptResponse == 'y')
  {
    Serial.print("What would you like to nickname ");
    Serial.print(currentName);
    Serial.println("?");

    // do not touch this: //

    int i = 0;
    memset(nicknameInput, 0, sizeof(nicknameInput)); // Clear the input buffer

    while (!Serial.available())
    {
      delay(10);
    }

    while (Serial.available() && i < sizeof(nicknameInput) - 1)
    {
      nicknameInput[i++] = (char)Serial.read();
      delay(200);
    }
    nicknameInput[i] = '\0'; // Null-terminate the string
    strncpy(currentNickname, nicknameInput, sizeof(currentNickname));
    currentNickname[sizeof(currentNickname) - 1] = '\0'; // Ensure null termination
  }

  // end do not touch section //

  else if (nicknamePromptResponse == 'N' || nicknamePromptResponse == 'n')
  {
    Serial.println("You're not choosing a nickname.");
    strncpy(currentNickname, currentName, sizeof(currentNickname));
    currentNickname[sizeof(currentNickname) - 1] = '\0'; // Ensure null termination
  }
  else
  {
    Serial.print("Invalid entry: ");
    Serial.println(nicknamePromptResponse);
    Serial.println("Please enter 'Y' or 'N'.");
  }
}

void generateTraits()
{
  if (digitalRead(button1) == HIGH && (!isGenerated))
  {
    delay(1000); // 1 second delay because i don't want multiple button presses register, cause that could mean multiple creatures generated

    // set to true so another creature can't be generated if the button is pressed again
    isGenerated = true;

    speciesIndex = random(0, 3);
    currentSpecies = species[speciesIndex];

    switch (speciesIndex)
    {
    case 0: // Griffin
      griffinNameIndex = random(0, 7);
      currentName = namesGriffin[griffinNameIndex];
      delay(50);
      break;

    case 1: // Dragon
      dragonNameIndex = random(0, 7);
      currentName = namesDragon[dragonNameIndex];
      delay(50);
      break;

    case 2: // Phoenix
      phoenixNameIndex = random(0, 7);
      currentName = namesPhoenix[phoenixNameIndex];
      delay(50);
      break;
    }

    displayCreature();

    currentAge = random(2, 5);

    tirednessIndex = random(0, 3);
    currentTiredness = tiredness[tirednessIndex];

    hungerIndex = random(0, 3);
    currentHunger = hunger[hungerIndex];

    thirstIndex = random(0, 3);
    currentThirst = thirst[thirstIndex];

    happinessIndex = random(0, 3);
    currentHappiness = happiness[happinessIndex];

    trustIndex = random(0, 3);
    currentTrust = trust[trustIndex];

    job1Index = random(0, 8);
    job1 = parentJobs[job1Index];

    job2Index = random(0, 8);
    job2 = parentJobs[job2Index];

    Serial.println();
    delay(50);
    Serial.print("You're providing care to a ");
    Serial.println(currentSpecies);
    delay(50);
    Serial.print("Their name is ");
    Serial.print(currentName);
    Serial.println(".");
    delay(50);
    Serial.print("They are ");
    Serial.print(currentAge);
    Serial.println(" years old.");
    delay(50);
    Serial.print("They are currently ");
    Serial.print(currentTiredness);
    Serial.print(", ");
    Serial.print(currentThirst);
    Serial.print(", and ");
    Serial.print(currentHunger);
    Serial.println(".");
    delay(50);
    Serial.print("They trust you ");
    Serial.print(currentTrust);
    Serial.println(".");
    delay(50);
    Serial.print("Their parents are currently ");
    Serial.print(job1);
    Serial.print(" and ");
    Serial.print(job2);
    Serial.println(".");
    delay(100);
    nicknamePrompt();
  }

  else if (digitalRead(button1) == HIGH && (isGenerated))
  {
    delay(50);
    Serial.print("You're already caring for ");
    Serial.print(currentNickname);
    delay(500);
  }
}

void playGame()
{
}

void foodAndWater()
{
  Serial.print("\nYou give some food and water to ");
  Serial.print(currentNickname);
  Serial.println(".");

  int currentIndexHunger = -1;
  for (int i = 0; i < 3; i++)
  {
    if (strcmp(currentHunger, hunger[i]) == 0)
    {
      currentIndexHunger = i;
      break;
    }
  }

  int currentIndexThirst = -1;
  for (int i = 0; i < 3; i++)
  {
    if (strcmp(currentThirst, thirst[i]) == 0)
    {
      currentIndexThirst = i;
      break;
    }
  }

  if (currentIndexHunger < 2)
  {
    currentHunger = hunger[currentIndexHunger + 1];
    Serial.print(currentNickname);
    Serial.print(" is now ");
    Serial.print(currentHunger);
    Serial.println(".");
  }
  else
  {
    Serial.print(currentNickname);
    Serial.print(" is ");
    Serial.print(currentHunger);
    Serial.println(".");
  }

  if (currentIndexThirst < 2)
  {
    currentThirst = thirst[currentIndexThirst + 1];
    Serial.print(currentNickname);
    Serial.print(" is now ");
    Serial.print(currentThirst);
    Serial.println(".");
  }
  else
  {
    Serial.print(currentNickname);
    Serial.print(" is ");
    Serial.print(currentThirst);
    Serial.println(".");
  }
}

void nap()
{
  Serial.print("\nYou tuck ");
  Serial.print(currentNickname);
  Serial.println(" in for a nap.");

  /* using strcmp() function:
  - compares two strings lexicographically (A-Z order)
  - returns 0 when strings match
  - negative number if string1 comes before string2 alphabetically
  - positive number if string1 comes after string2 alphabetically */

  int currentIndexNap = -1;
  // initialize at -1 in case tireness level doesn't match any of the array values
  for (int i = 0; i < 3; i++)
  {
    // loop to check all tiredness levels (i.e. indexes 0, 1, 2)
    if (strcmp(currentTiredness, tiredness[i]) == 0)
    {
      // if the currentTiredness value matches the i index value of the array (i.e. if strcmp() returns 0)
      currentIndexNap = i;
      // if they do match, assigned currentIndexNap to the current i value, and then exit
      break;
    }
  }

  if (currentIndexNap < 2)
  {
    // if we're not already at the array's maximum tiredness level
    currentTiredness = tiredness[currentIndexNap + 1];
    // currentTiredness equals the currentindex plus one
    Serial.print(currentNickname);
    Serial.print(" is now ");
    Serial.print(currentTiredness);
    Serial.println(".");
  }
  else
  {
    Serial.print(currentNickname);
    Serial.print(" is ");
    Serial.print(currentTiredness);
    Serial.println(".");
  }
}

void headpats()
{
  Serial.print("\nYou pat ");
  Serial.print(currentNickname);
  Serial.println(" on the head.");

  int currentIndexHappiness = -1;
  for (int i = 0; i < 3; i++)
  {
    if (strcmp(currentHappiness, happiness[i]) == 0)
    {
      currentIndexHappiness = i;
      break;
    }
  }

  if (currentIndexHappiness < 2)
  {
    currentHappiness = happiness[currentIndexHappiness + 1];
    Serial.print(currentNickname);
    Serial.print(" is now ");
    Serial.print(currentHappiness);
    Serial.println(".");
  }
  else
  {
    Serial.print(currentNickname);
    Serial.print(" is ");
    Serial.print(currentHappiness);
    Serial.println(".");
  }
}

void displayCurrentCondition()
{
  Serial.print("\n");
  Serial.print(currentNickname);
  Serial.print(" is currently ");
  Serial.print(currentTiredness);
  Serial.println(".");
  Serial.print("They're ");
  Serial.print(currentThirst);
  Serial.print(" and they're ");
  Serial.print(currentHunger);
  Serial.println(".");
  Serial.print("They're ");
  Serial.print(currentHappiness);
  Serial.print(" and they trust you ");
  Serial.print(currentTrust);
  Serial.println(".");
}

void menuChooseAction()
{
  bool isRefreshedRequired = true;

  while (isGenerated)
  {

    if (isRefreshedRequired)
    {
      Serial.println();
      Serial.println("--- Menu ---");

      Serial.print("Press Button 2 to play a game with ");
      Serial.print(currentNickname);
      Serial.println(".");

      Serial.print("Press Button 3 to give ");
      Serial.print(currentNickname);
      Serial.println(" food and water.");

      Serial.print("Press Button 4 to tuck ");
      Serial.print(currentNickname);
      Serial.println(" in for a nap.");

      Serial.print("Press Button 5 to give ");
      Serial.print(currentNickname);
      Serial.println(" headpats.");

      Serial.print("Press Button 6 to see ");
      Serial.print(currentNickname);
      Serial.println("'s current condition.");

      Serial.print("Press Button 7 when it's time for ");
      Serial.print(currentNickname);
      Serial.println("'s parents to pick them up.");

      isRefreshedRequired = false;
    }

    for (int i = 0; i < 10; i++)
    {
      // use a for loop to keep looping as time passes; better than using delay(), since delay() blocks all input
      if (digitalRead(button2) == HIGH)
      {
        playGame();
        isRefreshedRequired = true;
        break;
      }
      if (digitalRead(button3) == HIGH)
      {
        foodAndWater();
        isRefreshedRequired = true;
        break;
      }
      if (digitalRead(button4) == HIGH)
      {
        nap();
        isRefreshedRequired = true;
        break;
      }
      if (digitalRead(button5) == HIGH)
      {
        headpats();
        isRefreshedRequired = true;
        break;
      }
      if (digitalRead(button6) == HIGH)
      {
        displayCurrentCondition();
        isRefreshedRequired = true;
        break;
      }
      if (digitalRead(button7) == HIGH)
      {
        Serial.println("Button 7.");
        isRefreshedRequired = true;
        break;
      }
      delay(100);
    }
  }
}

// setup and loop //

void setup()
{
  Serial.begin(9600);
  randomSeed(analogRead(0));
  Serial.print("Press Button 1 to begin.");

  // LCD

  lcd.begin(16, 2);
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Creature Care");

  // Pins

  pinMode(button1, INPUT);
  pinMode(button2, INPUT);
  pinMode(button3, INPUT);
  pinMode(button4, INPUT);
  pinMode(button5, INPUT);
  pinMode(button6, INPUT);
  pinMode(button7, INPUT);
  pinMode(RGBBluePin, OUTPUT);
  pinMode(RGBGreenPin, OUTPUT);
  pinMode(RGBRedPin, OUTPUT);
}

void loop()
{
  if (!isGenerated)
  {
    generateTraits();
  }
  else
  {
    menuChooseAction();
  }
  delay(50);
}